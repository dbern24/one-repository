from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from my_bot.bot.utils import database as db
from my_bot.bot.utils.auxiliary import user_menu
from my_bot.bot.utils.config import log_channel, thread_id_start, referral_reward_price, photo_start_url

start_router = Router()


def start_message(first_name, user_id):

    text = f"""
<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ CrypteX, <a href="tg://user?id={user_id}">{first_name}</a>!</b> üëã

<a href="https://t.me/CrypteXCoinsBot">CrypteX</a> ‚Äî —ç—Ç–æ –æ—Å–æ–±–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤ Telegram, –≥–¥–µ –ø—Ä–æ—è–≤–ª—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–æ–Ω–µ—Ç—ã –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞, –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É!

–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª <a href="https://t.me/CrypteXCommunity">–Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</a>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!
"""

    return text


@start_router.message(Command("start"))
async def start_handler(message: types.Message, bot: Bot):
    if message.chat.type == 'private':

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–Ø –Ω–µ —Ä–æ–±–æ—Ç ü§ñ", callback_data="not_a_robot")],
        ])

        is_not_new_user = await db.user_exists(message.from_user.id)
        first_name = message.from_user.first_name
        user_id = message.from_user.id
        start_command = message.text
        referrer_id = start_command[7:]

        if is_not_new_user:
            await bot.send_photo(message.from_user.id, photo=photo_start_url,
                                 caption=start_message(first_name, user_id), parse_mode="HTML", reply_markup=user_menu)
        else:
            if referrer_id:
                if referrer_id != str(message.from_user.id):
                    try:
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–Ω–µ –ø–æ–ª—É—á–µ–Ω–æ" –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
                        await db.add_user(message.from_user.id, int(referrer_id))
                        await db.update_reward_status(message.from_user.id, 'not_received')

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–º
                        invited_by = await db.get_invited_by(message.from_user.id)
                        if invited_by:
                            # –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            inviter_id = invited_by

                            message_inviter_id = (
                                f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {first_name} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É!"
                            )
                            await bot.send_message(inviter_id, text=message_inviter_id, parse_mode="HTML")

                    except Exception as e:
                        await message.answer(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.", show_alert=True)
                else:
                    await bot.send_message(message.from_user.id, "–ó–∞–ø—Ä–µ—â–µ–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–≤–æ–µ–π –∂–µ —Å—Å—ã–ª–∫–µ!")
            else:
                try:
                    await db.add_user(message.from_user.id, 0)
                except Exception as e:
                    await message.answer(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)

            user_id = message.from_user.id
            username = message.from_user.username
            first_name = message.from_user.first_name
            last_name = message.from_user.last_name
            language_code = message.from_user.language_code

            info_text = f"<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n"
            info_text += f"User ID: {user_id}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={user_id}'>{first_name}</a>.\n"
            info_text += f"Username: @{username}\n" if username else "No username\n"
            info_text += f"First Name: {first_name}\n"
            info_text += f"Last Name: {last_name}\n" if last_name else "No last name\n"
            info_text += f"Language Code: {language_code}\n" if language_code else "No language code\n"

            await bot.send_message(log_channel, info_text, message_thread_id=thread_id_start, parse_mode="HTML")

            message_text = (
                f"<b>–ü–æ—Å—Ç–æ–π-–∫–∞ <a href='tg://user?id={user_id}'>{first_name}, –∞ —è –æ —Ç–µ–±–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—ã—à–∞–ª!</b>"
                f"\n\n"
                f"–¢–≤–æ–∏ $USDC —É–∂–µ –∂–¥—É—Ç —Ç–µ–±—è, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –±–æ—Ç–∞! üëá"
            )
            await message.answer(message_text, parse_mode="HTML", reply_markup=keyboard)


# callback_query

@start_router.callback_query(lambda c: c.data == 'not_a_robot')
async def handle_download_stats(callback_query: types.CallbackQuery, bot: Bot):

    await callback_query.answer(text="", show_alert=True)
    await callback_query.message.delete()

    user_id = callback_query.from_user.id
    first_name = callback_query.from_user.first_name

    try:
        await db.update_verification_status(user_id, is_verified=1)

        await bot.send_message(user_id, f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–π–¥–µ–Ω–∞, {first_name}, —É–¥–∞—á–∏!",
                               parse_mode="HTML")

        invited_by = await db.get_invited_by(user_id)
        if invited_by and invited_by != 0:

            reward_status = await db.get_reward_status(user_id)
            if reward_status == 'not_received':
                try:

                    await db.update_reward_status(user_id, 'received')
                    message_user_id = (
                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{referral_reward_price} $USDC –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
                    await bot.send_message(user_id, text=message_user_id, parse_mode="HTML")

                    message_invited_by = (
                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{referral_reward_price} $USDC –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!"
                    )
                    await bot.send_message(invited_by, text=message_invited_by, parse_mode="HTML")

                except Exception as e:
                    await callback_query.answer(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}.", show_alert=True)

    except Exception as e:
        await callback_query.answer(text=f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}.", show_alert=True)

    await bot.send_photo(callback_query.from_user.id, photo=photo_start_url,
                         caption=start_message(first_name, user_id), parse_mode="html", reply_markup=user_menu)


