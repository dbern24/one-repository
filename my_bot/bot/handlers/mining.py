import random
import time

from aiogram import Router, Bot, types, F
from my_bot.bot.utils.auxiliary import check_sub_channels, user_not_subscribed_message, mining_menu
from my_bot.bot.utils import database as db
from my_bot.bot.utils.config import thread_id_get_usdc, log_channel
from aiogram.utils.keyboard import ReplyKeyboardBuilder

mining_router = Router()

last_button_press = {}


@mining_router.message(F.text == '‚õè –ú–∞–π–Ω–∏–Ω–≥')
async def menu_plugins(message: types.Message, bot: Bot):
    if message.chat.type == 'private':
        if await check_sub_channels(message.from_user.id, bot):
            await message.reply('–ú–µ–Ω—é ¬´‚õè –ú–∞–π–Ω–∏–Ω–≥¬ª:', reply_markup=mining_menu)
        else:
            await user_not_subscribed_message(message, bot)


@mining_router.message(F.text == '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥? ‚ùì')
async def explain_mining(message: types.Message, bot: Bot):
    if await check_sub_channels(message.from_user.id, bot):
        user_id = message.from_user.id
        message_text = (
            f"<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥? ‚ùì</b>\n\n"
            f"–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ ¬´–ú–∞–π–Ω–∏–Ω–≥¬ª –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∞—à—É "
            f"–Ω–∞–≥—Ä–∞–¥—É, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –Ω–∞–≥—Ä–∞–¥—ã —Ä–∞–∑–ª–∏—á–Ω–∞,"
            f"–∏ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—É—é —Å—É–º–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π —É–¥–∞—á–∏!\n\n"
            f"<b>–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —à–∞–Ω—Å—ã –≤—ã–ø–∞–¥–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç:</b>\n"
            f"üíé +0.08 (35.7%)\n"
            f"ü™ô +0.10 (28.6%)\n"
            f"üåã +0.11 (21.4%)\n"
            f"‚õè +0.15 (14.3%)"
        )
        await message.answer(message_text, parse_mode="HTML")
    else:
        await user_not_subscribed_message(message, bot)


list_emoji = [
    {"emoji": "üíé", "weight": 10, "cost": 0.08},
    {"emoji": "ü™ô", "weight": 2, "cost": 0.10},
    {"emoji": "üåã", "weight": 1, "cost": 0.11},
    {"emoji": "‚õèÔ∏è", "weight": 1, "cost": 0.15}
]


async def spin_wheel():
    total_weight = sum(emoji["weight"] for emoji in list_emoji)
    random_num = random.uniform(0, total_weight)
    cumulative_weight = 0
    chosen_emoji = None

    for emoji in list_emoji:
        cumulative_weight += emoji["weight"]
        if random_num <= cumulative_weight:
            chosen_emoji = emoji
            break

    return chosen_emoji


@mining_router.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É üí∞')
async def get_currency(message: types.Message, bot: Bot):
    if await check_sub_channels(message.from_user.id, bot):
        user_id = message.from_user.id
        current_time = int(time.time())

        if user_id not in last_button_press or current_time - last_button_press[user_id] >= 3600:
            emoji_result = await spin_wheel()
            await db.update_user_balance(user_id, emoji_result["cost"])
            last_button_press[user_id] = current_time

            await bot.send_message(
                log_channel,
                f"{user_id} –ø–æ–ª—É—á–∞–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ +{emoji_result['cost']} ({emoji_result['emoji']}) –Ω–∞ –±–∞–ª–∞–Ω—Å.",
                message_thread_id=thread_id_get_usdc, parse_mode="html"
            )

            await message.answer(
                f"{emoji_result['emoji']} <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –ö –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É –ø—Ä–∏–±–∞–≤–ª–µ–Ω–æ +{emoji_result['cost']} $USDC!",
                parse_mode="html"
            )
        else:
            time_left = 3600 - (current_time - last_button_press[user_id])
            await message.answer(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {time_left // 60} –º–∏–Ω—É—Ç!")
    else:
        await user_not_subscribed_message(message, bot)
