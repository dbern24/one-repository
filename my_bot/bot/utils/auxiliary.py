from aiogram import Router, types, Bot, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from my_bot.bot.utils import database as db
from my_bot.bot.utils.config import CHANNEL_ID


auxiliary_router = Router()

last_button_press = {}


async def check_sub_channels(user_id, bot: Bot):
    channels = await db.get_active_channels()
    for channel in channels:
        channel_name = channel[0]
        channel_id = channel[1]
        try:
            chat_member = await bot.get_chat_member(channel_id, user_id)
            if chat_member.status == 'left':
                return False
        except Exception as e:
            await bot.send_message(CHANNEL_ID,
                                   f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel_name} ({channel_id}): {e}.")
            return False
    return True


@auxiliary_router.callback_query(F.data == 'check_sub_channels_repeat')
async def check_sub_channels_repeat(callback_query: types.CallbackQuery, bot: Bot):
    first_name = callback_query.from_user.first_name

    if await check_sub_channels(callback_query.from_user.id, bot):
        await callback_query.answer(text=f"{first_name}, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", show_alert=True)
        await callback_query.message.delete()
        await bot.send_message(callback_query.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª:', reply_markup=user_menu)
    else:
        await callback_query.answer(text="", show_alert=True)
        message_text = (
            f"<b>{first_name}</b>, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª(—ã) –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        await bot.send_message(callback_query.from_user.id, message_text, parse_mode="HTML",
                               reply_markup=await not_signed())
        await callback_query.message.delete()


async def user_not_subscribed_message(message: types.Message, bot: Bot):
    first_name = message.from_user.first_name
    message_text = (
        f"{first_name}, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–±—É–µ–º—ã–µ –∫–∞–Ω–∞–ª(—ã), —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!"
    )
    await bot.send_chat_action(message.chat.id, "typing")
    await bot.send_message(message.from_user.id, message_text, reply_markup=await not_signed())


@auxiliary_router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def menu_plugins(message: types.Message):
    if message.chat.type == 'private':
        await message.reply('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª:', reply_markup=user_menu)


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_menu = types.ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [types.KeyboardButton(text="üíº –ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton(text="üë©üèª‚Äçüîß –ü–æ–º–æ—â—å")],
        [types.KeyboardButton(text="üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å")],
        [types.KeyboardButton(text="‚õè –ú–∞–π–Ω–∏–Ω–≥")],
    ]
)


help_menu = types.ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [types.KeyboardButton(text="–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üõ†Ô∏è")],
        [types.KeyboardButton(text="–ö–∞–Ω–∞–ª –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ üåê")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
)


referral_menu = types.ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [types.KeyboardButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å? ‚ùì")],
        [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è üîó")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
)


mining_menu = types.ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [types.KeyboardButton(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥? ‚ùì")],
        [types.KeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É üí∞")],
        [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")],
    ]
)


# inline

async def not_signed():
    inline_keyboard = []

    channels = await db.get_active_channels()
    for channel in channels:

        buttons_set = InlineKeyboardButton(text=channel[0], url=channel[2])
        inline_keyboard.append([buttons_set])

    buttons = InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ!", callback_data="check_sub_channels_repeat")
    inline_keyboard.append([buttons])

    keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    return keyboard
