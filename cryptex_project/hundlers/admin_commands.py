from aiogram.filters import Command
from aiogram import Router, types, Bot

from data.db import Database
import data.long_messages as lmsg
import data.config as cfg
import keyboard.reply as rpl


db = Database('data/database.db')

router = Router()


@router.message(Command('admin'))
async def admin_command_handler(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        if message.from_user.id in cfg.admin_ids:

            await bot.send_message(message.from_user.id, lmsg.admin_panel, parse_mode="html", reply_markup=rpl.AdmMenu)


        else:
            
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ üë•")
async def admin_command_handler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        
        if message.from_user.id in cfg.admin_ids:

            formatted_info = ""
            for channel in cfg.channels:
                name = channel[0]
                chat_id = channel[1]
                link = channel[2]
                formatted_info += f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞: {name}\n"
                formatted_info += f"ID —á–∞—Ç–∞: {chat_id}\n"
                formatted_info += f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª: {link}\n\n"

            await bot.send_message(message.from_user.id, formatted_info, disable_web_page_preview=True)

        else:
            
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@router.message(lambda message: message.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏ üí∞")
async def admin_command_handler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        
        if message.from_user.id in cfg.admin_ids:
            
            await bot.send_message(message.from_user.id, "üí∞ *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–ª–≤–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n–°–Ω—è—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞: /withdraw [user_id] [—Å—É–º–º–∞].\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞: /check [user_id]\n\n–ü—Ä–∏–±–∞–≤–∫–∞ –∫ –±–∞–ª–∞–Ω—Å—É: /add [user_id] [—Å—É–º–º–∞].", parse_mode="markdown")

        else:
            
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@router.message(lambda message: message.text == "–¢–∞–±–ª–∏—Ü–∞ UID –ª–∏–¥–µ—Ä–æ–≤") 
async def admin_command_handler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        
        if message.from_user.id in cfg.admin_ids:
            
            await bot.send_chat_action(message.chat.id, "typing")
    
            total_users_count = db.count_total_users()
            number_with_offset = total_users_count + 0
            balance = db.get_balance(message.from_user.id)
    
            top_users = db.get_top5_users()
    
            response = f"*üÜî –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –≤–∫–ª—é—á–∞—è –∏—Ö UID –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏:*\n"
            for idx, (user_id, balance) in enumerate(top_users, start=1):
                response += f"\n*{idx} {user_id}*: {balance}."
                
            await message.answer(response, parse_mode="markdown")
            
        else:
            
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@router.message(lambda message: message.text == "C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä") 
async def admin_command_handler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        
        if message.from_user.id in cfg.admin_ids:
            
            await bot.send_chat_action(message.chat.id, "typing")
    
            total_users_count = db.count_total_users()
            number_with_offset = total_users_count + 0
            balance = db.get_balance(message.from_user.id)

            await bot.send_message(message.from_user.id, f"\n\nüìá –ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –≤ –±–æ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {number_with_offset} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!\n\n–ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", parse_mode="markdown")
                            
        else:
            
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")



@router.message(lambda message: message.text == "–†–∞—Å—Å—ã–ª–∫–∞ üì©") 
async def admin_command_handler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        
        if message.from_user.id in cfg.admin_ids:
            
            await bot.send_chat_action(message.chat.id, "typing")

            await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", parse_mode="markdown")
                            
        else:
            
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            

@router.message(Command('check'))
async def check_command_handler(message: types.Message):
    if message.chat.type == "private":
        
        if message.from_user.id in cfg.admin_ids:
            
            try:
                command, user_id = message.text.split(' ')
                user_id = int(user_id)
            except ValueError:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check [user_id].")
                return
            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                return

            balance = db.get_balance(user_id)

            await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}: {balance}.")
            return
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

            pass


@router.message(Command('withdraw'))
async def withdraw_balance_command_handler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        if message.from_user.id in cfg.admin_ids:
            try:
                command, user_id, amount_str = message.text.split(' ')
                user_id = int(user_id)
                amount = float(amount_str)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ float

            except ValueError:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /withdraw [user_id] [—Å—É–º–º–∞]")
                return

            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                return

            if not db.subtract_from_balance(user_id, amount):
                await message.answer(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å —Å—É–º–º—É —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
                return

            balance = db.get_balance(user_id)

            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ: {user_id}: {balance + amount}.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}: {balance}.")
            await bot.send_message(cfg.log_channel, f"üì§ C –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, –±—ã–ª–æ —Å–Ω—è—Ç–æ –≤–∞–ª—é—Ç—É –≤ –∫–æ–ª-–≤–æ: {amount}!\n\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ: {user_id}: {balance + amount}.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}: {balance}.", message_thread_id=cfg.thread_id_admin)

            return
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


@router.message(Command('add'))
async def add_balance_command_handler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        if message.from_user.id in cfg.admin_ids:
            try:
                command, user_id, amount_str = message.text.split(' ')
                user_id = int(user_id)
                amount = float(amount_str)  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ float

            except ValueError:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add [user_id] [—Å—É–º–º–∞].")
                return

            except Exception as e:
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                return

            if amount < 0:
                await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return

            db.add_to_balance(user_id, amount)  # –ò–∑–º–µ–Ω–µ–Ω–æ: –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

            balance = db.get_balance(user_id)

            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ: {user_id}: {balance - amount}.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}: {balance}.")
            await bot.send_message(cfg.log_channel, f"üì• –ö –±–∞–ª–∞–Ω—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}, –±—ã–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –≤–∞–ª—é—Ç–∞ –≤ –∫–æ–ª-–≤–æ: {amount}!\n\n–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ: {user_id}: {balance - amount}.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}: {balance}.", message_thread_id=cfg.thread_id_admin)

        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

