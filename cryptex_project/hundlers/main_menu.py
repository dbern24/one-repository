import time
import random

from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message

import data.config as cfg
import keyboard.inline as inl
import keyboard.reply as rpl

import data.long_messages as lmsg

from data.db import Database


class Form(StatesGroup):
    amount = State()
    wallet = State()


db = Database('data/database.db')
last_button_press = {}

router = Router()


@router.callback_query(lambda query: query.data == 'subchanneldone')
async def subchanneldone(message: types.Message, bot: Bot):
    if await check_sub_channels(cfg.channels, message.from_user.id, bot):

        user_id = message.from_user.id
        first_name = message.from_user.first_name
        await bot.send_photo(message.from_user.id, photo=cfg.photo_start_url,
                             caption=lmsg.start_message(first_name, user_id), parse_mode="html",
                             reply_markup=rpl.mainMenu)

        await message.answer(text="", show_alert=True)

    else:
        await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                               reply_markup=inl.showchannels())
        await message.answer(text="", show_alert=True)


@router.callback_query(lambda query: query.data == 'subchanneldoneRef')
async def subchanneldone(message: types.Message, bot: Bot):
    if await check_sub_channels(cfg.channels, message.from_user.id, bot):

        await bot.send_message(message.from_user.id, "üéä <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!</b> –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ, –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!",
                               parse_mode="html", reply_markup=rpl.mainMenuRef)
        await message.answer(text="", show_alert=True)

    else:
        await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                               reply_markup=inl.showchannels())
        await message.answer(text="", show_alert=True)


async def check_sub_channels(channels, user_id, bot: Bot):
    for channel in channels:
        chat_member = await bot.get_chat_member(channel[1], user_id)
        if chat_member.status == 'left':
            return False
    return True


@router.message(lambda message: message.text == "üéâ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!")
async def bot_message(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        try:

            if await check_sub_channels(cfg.channels, message.from_user.id, bot):

                user_id = message.from_user.id
                refreward_value = db.get_refreward(user_id)
                referrer_id = db.get_referrer_id(user_id)

                await bot.send_chat_action(message.chat.id, "typing")

                if refreward_value:  # –ï—Å–ª–∏ refreward_value —Ä–∞–≤–Ω–æ True > —Ç.–µ. –î–ê —é–∑–µ—Ä –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É.

                    await bot.send_message(user_id, "‚ùå –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!", parse_mode="html", reply_markup=rpl.mainMenu)

                else:  # –ï—Å–ª–∏ refreward_value —Ä–∞–≤–Ω–æ False  > —Ç.–µ. –ù–ï–¢ —é–∑–µ—Ä –ù–ï –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É.

                    try:

                        db.update_refreward(user_id, 'yes')  # –¢—É—Ç –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –î–ê, —á—Ç–æ —é–∑–µ—Ä —É–∂–µ –ø–æ–ª—É—á–∞–ª –Ω–∞–≥—Ä–∞–¥—É –ø–æ—Å–ª–µ —Ü—ã–∫–ª–∞.
                        await bot.send_message(cfg.log_channel, f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ!\n\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω –æ—Ç: tg://user?id={referrer_id}\n\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: tg://user?id={user_id}", message_thread_id=cfg.thread_id_ref, parse_mode="html")

                        await bot.send_message(user_id, "üéâ <b>–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!</b>\n\n–í—ã –∏ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª, –ø–æ–ª—É—á–∞–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ —Å—á–µ—Ç!", parse_mode="html")
                        db.add_to_balance(user_id, 0.20)

                        await bot.send_message(referrer_id, "üéâ <b>–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!</b>\n\n–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!", parse_mode="html")
                        db.add_to_balance(referrer_id, 0.20)

                        user_id = message.from_user.id
                        first_name = message.from_user.first_name
                        await bot.send_photo(message.from_user.id, photo=cfg.photo_start_url,
                                             caption=lmsg.start_message(first_name, user_id), parse_mode="html",
                                             reply_markup=rpl.mainMenu)

                    except Exception as e:
                        await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞: (ref_reward) User: {user_id}!</b>\n{e}.", message_thread_id=cfg.thread_id_sponsor, parse_mode="html")

            else:
                await bot.send_chat_action(message.chat.id, "typing")
                await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                                       reply_markup=inl.showchannelsRef())

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {e}.", message_thread_id=cfg.thread_id_sponsor, parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")
            print(f"Failed [–ü—Ä–æ—Ñ–∏–ª—å]: {e}.")


@router.message(lambda message: message.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å")
async def bot_message(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        try:

            if await check_sub_channels(cfg.channels, message.from_user.id, bot):
                await bot.send_chat_action(message.chat.id, "typing")

                balance = db.get_balance(message.from_user.id)
                user_id = message.from_user.id
                user = await bot.get_chat(user_id)
                user_firs_name = user.first_name
                user_name = user.username

                withdraw = InlineKeyboardBuilder()
                withdraw.button(text="–í—ã–≤–æ–¥ üì•", callback_data="process_withdraw_step")
                withdraw.adjust(1)

                await bot.send_message(message.from_user.id, lmsg.profile_message(user_firs_name, user_id, balance),
                                       parse_mode="html", reply_markup=withdraw.as_markup())

            else:
                await bot.send_chat_action(message.chat.id, "typing")
                await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                                       reply_markup=inl.showchannels())

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


# C–∏—Å—Ç–µ–º–∞ –ø–æ –≤—ã–≤–æ–¥—É.

@router.callback_query(lambda query: query.data == 'process_withdraw_step')
async def process_withdraw(callback_query: types.CallbackQuery, bot: Bot):

    confirm = InlineKeyboardBuilder()
    confirm.button(text="–Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤—ã–≤–æ–¥! ‚úÖ", callback_data="process_withdraw_step_two")
    confirm.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_withdraw")
    confirm.adjust(2)

    balance = db.get_balance(callback_query.from_user.id)

    if balance <= 20:  # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 10:

        await callback_query.answer(text='', show_alert=True)
        await bot.send_message(callback_query.from_user.id,
                               "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ –º–µ–Ω–µ–µ 20 $USDC!")
    else:
        await callback_query.answer(text='', show_alert=True)
        await bot.send_message(callback_query.from_user.id, lmsg.withdraw_message(), parse_mode="html", reply_markup=confirm.as_markup())


@router.callback_query(lambda query: query.data == 'process_withdraw_step_two')
async def process_withdraw(callback_query: types.CallbackQuery, bot: Bot):

    usdt = InlineKeyboardBuilder()
    usdt.button(text="$USDC –≤ —Å–µ—Ç–∏ BEP-20", callback_data="process_withdraw_usdc")
    usdt.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_withdraw")
    usdt.adjust(1)

    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–≤–æ–¥–∞:\n\n–ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –≤–∑–∏–º–∞—Ç—å—Å—è –∫–æ–º–∏—Å—Å–∏—è –≤ —Ä–∞–∑–º–µ—Ä–µ –æ—Ç 10% –¥–æ 30%, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.", parse_mode="html", reply_markup=usdt.as_markup())
    await callback_query.answer(text='', show_alert=True)


@router.callback_query(lambda query: query.data == 'process_withdraw_usdc')
async def process_withdraw(callback_query: types.CallbackQuery, bot: Bot):
    balance = db.get_balance(callback_query.from_user.id)

    if balance <= 20:  # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 10:
        await bot.send_message(callback_query.from_user.id,
                               "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏!")
        await callback_query.answer(text='', show_alert=True)

    else:

        accept = InlineKeyboardBuilder()
        accept.button(text="–Ø —Å–æ–≥–ª–∞—Å–µ–Ω ‚úÖ", callback_data="process_next_usd—Å")
        accept.button(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="cancel_withdraw")
        accept.adjust(2)

        await bot.send_message(callback_query.from_user.id, lmsg.alert_message(), parse_mode="html", reply_markup=accept.as_markup())
        await callback_query.answer(text='', show_alert=True)
        await callback_query.message.delete()
        return


@router.callback_query(lambda query: query.data == 'process_next_usd—Å')
async def process_withdraw(callback_query: types.CallbackQuery, state: FSMContext):

    cancel = InlineKeyboardBuilder()
    cancel.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É ‚ùå", callback_data="cancel_withdraw")
    cancel.adjust(1)

    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É USDC –¥–ª—è –≤—ã–≤–æ–¥–∞:", reply_markup=cancel.as_markup())
    await callback_query.answer(text='', show_alert=True)
    await callback_query.message.delete()
    await state.set_state(Form.amount)


@router.callback_query(lambda query: query.data == 'cancel_withdraw')
async def process_cancle(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer(text='', show_alert=True)
    await callback_query.message.delete()
    await state.clear()
    return


@router.message(Form.amount)
async def process_amount(message: Message, state: FSMContext) -> None:
    if message.text.isdigit():

        balance = db.get_balance(message.from_user.id)
        amount = float(message.text)

        if 0 <= amount <= balance:

            cancel = InlineKeyboardBuilder()
            cancel.button(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É ‚ùå", callback_data="cancel_withdraw")
            cancel.adjust(1)

            await state.update_data(amount=amount)
            await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à USDC –∫–æ—à–µ–ª–µ–∫ –≤ —Å–µ—Ç–∏ BEP-20:", reply_markup=cancel.as_markup())
            await state.set_state(Form.wallet)
        else:

            repeat = InlineKeyboardBuilder()
            repeat.button(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É üîÑ", callback_data="process_next_usd—Å")
            repeat.adjust(1)

            await message.answer(f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0 –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å.", reply_markup=repeat.as_markup())
            await state.clear()
    else:

        repeat = InlineKeyboardBuilder()
        repeat.button(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É üîÑ", callback_data="process_next_usd—Å")
        repeat.adjust(1)

        await message.answer(f"–í–≤–µ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–Ω–æ–≤—å!", reply_markup=repeat.as_markup())
        await state.clear()


@router.message(Form.wallet)
async def process_amount(message: Message, state: FSMContext, bot: Bot) -> None:
    await state.update_data(wallet=message.text)

    data = await state.get_data()
    amount = data.get('amount')
    wallet = message.text

    msg_withdraw_user = f"""
    ‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</b>\n\n<b>–£–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫:</b> {str(wallet)}.\n<b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> {str(amount)}.\n\n<blockquote>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 15 –º–∏–Ω—É—Ç –¥–æ 48 —á–∞—Å–æ–≤ –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.</blockquote> \n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª, –º—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç–∏–Ω–≥ –∏ –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã. –í —Å–ª—É—á–∞–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–∞—à–∞ –Ω–∞–≥–∞—Ä–∞–¥–∞ –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω–∞.
    """

    await message.answer(msg_withdraw_user, parse_mode="html")

    user_id = message.from_user.id
    user = await bot.get_chat(user_id)
    user_first_name = user.first_name
    user_name = user.username

    msg_withdraw = f"""
    ‚ö†Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤!</b>
    \n\n<b>–ò–º—è:</b> {user_first_name}.\n<b>ID:</b> {user_id}.\n<b>Username:</b> @{user_name}.\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>\n–ö–æ—à–µ–ª–µ–∫: {str(wallet)}.\n–°—É–º–º–∞: {str(amount)}.\n\n<b>–î–ª—è —Å–Ω—è—Ç–∏—è —Å—É–º–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É:</b> /withdraw {user_id} {str(amount)}.
    """

    await bot.send_message(cfg.log_channel, msg_withdraw, parse_mode="html")
    await state.clear()


# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

@router.message(lambda message: message.text == "üë©üèª‚Äçüîß –ü–æ–º–æ—â—å")
async def knowledge_base_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        try:

            await bot.send_chat_action(message.chat.id, "typing")
            await bot.send_message(message.from_user.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –º–µ–Ω—é ¬´üë©üèª‚Äçüîß –ü–æ–º–æ—â—å¬ª:", reply_markup=rpl.helpMenu,
                                   parse_mode="html")

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>Failed:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.message(lambda message: message.text == "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üõ†Ô∏è")
async def knowledge_base_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        try:

            await bot.send_chat_action(message.chat.id, "typing")

            support = InlineKeyboardBuilder()
            support.button(text="üë©üèª‚Äçüîß –Ø —Ö–æ—á—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏!", url="https://t.me/CrypteXSupportBot")
            support.adjust(1)

            await message.answer(lmsg.support_message(), reply_markup=support.as_markup(), parse_mode="html")

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>Failed:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.message(lambda message: message.text == "–ö–∞–Ω–∞–ª –∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ üåê")
async def knowledge_base_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        try:

            await bot.send_chat_action(message.chat.id, "typing")
            await bot.send_message(message.from_user.id, lmsg.resources, parse_mode="html", disable_web_page_preview=True)

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.message(lambda message: message.text == "–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã ‚ùì")
async def knowledge_base_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        try:

            await bot.send_chat_action(message.chat.id, "typing")

            knowledge_base = InlineKeyboardBuilder()
            knowledge_base.button(text="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à –±–æ—Ç?", callback_data="knowledge_answer_1")
            knowledge_base.button(text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –≤–∫–ª–∞–¥—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞?", callback_data="knowledge_answer_2")
            knowledge_base.button(text="–ö–∞–∫ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ –±–æ—Ç–∞?", callback_data="knowledge_answer_3")
            knowledge_base.button(text="–ì–¥–µ –º—ã –±–µ—Ä–µ–º —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?", callback_data="knowledge_answer_4")
            knowledge_base.button(text="–ö–∞–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Å –∂–¥—É—Ç?", callback_data="knowledge_answer_5")
            knowledge_base.adjust(1)

            await message.answer(lmsg.knowledge_base, reply_markup=knowledge_base.as_markup(), parse_mode="html")

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.callback_query(lambda query: query.data == 'knowledge_answer_1')
async def knowledge_answer_1(callback_query: types.CallbackQuery, bot: Bot):

    cancel = InlineKeyboardBuilder()
    cancel.button(text="–Ø –ø—Ä–æ—á–µ–ª, —É–¥–∞–ª–∏—Ç—å üóë", callback_data="cancel_withdraw")
    cancel.adjust(1)

    await callback_query.answer(text='', show_alert=True)
    await bot.send_message(callback_query.from_user.id, text=lmsg.knowledge_answer_1, reply_markup=cancel.as_markup(), parse_mode="html")


@router.callback_query(lambda query: query.data == 'knowledge_answer_2')
async def knowledge_answer_1(callback_query: types.CallbackQuery, bot: Bot):

    cancel = InlineKeyboardBuilder()
    cancel.button(text="–Ø –ø—Ä–æ—á–µ–ª, —É–¥–∞–ª–∏—Ç—å üóë", callback_data="cancel_withdraw")
    cancel.adjust(1)

    await callback_query.answer(text='', show_alert=True)
    await bot.send_message(callback_query.from_user.id, text=lmsg.knowledge_answer_2, reply_markup=cancel.as_markup(), parse_mode="html")


@router.callback_query(lambda query: query.data == 'knowledge_answer_3')
async def knowledge_answer_1(callback_query: types.CallbackQuery, bot: Bot):

    cancel = InlineKeyboardBuilder()
    cancel.button(text="–Ø –ø—Ä–æ—á–µ–ª, —É–¥–∞–ª–∏—Ç—å üóë", callback_data="cancel_withdraw")
    cancel.adjust(1)

    await callback_query.answer(text='', show_alert=True)
    await bot.send_message(callback_query.from_user.id, text=lmsg.knowledge_answer_3, reply_markup=cancel.as_markup(), parse_mode="html")


@router.callback_query(lambda query: query.data == 'knowledge_answer_4') 
async def knowledge_answer_1(callback_query: types.CallbackQuery, bot: Bot):

    cancel = InlineKeyboardBuilder()
    cancel.button(text="–Ø –ø—Ä–æ—á–µ–ª, —É–¥–∞–ª–∏—Ç—å üóë", callback_data="cancel_withdraw")
    cancel.adjust(1)

    await callback_query.answer(text='', show_alert=True)
    await bot.send_message(callback_query.from_user.id, text=lmsg.knowledge_answer_4, reply_markup=cancel.as_markup(), parse_mode="html")


@router.callback_query(lambda query: query.data == 'knowledge_answer_5')
async def knowledge_answer_1(callback_query: types.CallbackQuery, bot: Bot):

    cancel = InlineKeyboardBuilder()
    cancel.button(text="–Ø –ø—Ä–æ—á–µ–ª, —É–¥–∞–ª–∏—Ç—å üóë", callback_data="cancel_withdraw")
    cancel.adjust(1)

    await callback_query.answer(text='', show_alert=True)
    await bot.send_message(callback_query.from_user.id, text=lmsg.knowledge_answer_5, reply_markup=cancel.as_markup(), parse_mode="html")


@router.message(Command("leaderboard"))
async def leader_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        try:

            if await check_sub_channels(cfg.channels, message.from_user.id, bot):
                await bot.send_chat_action(message.chat.id, "typing")

                total_users_count = db.count_total_users()
                number_with_offset = total_users_count + 0
                balance = db.get_balance(message.from_user.id)

                top_users = db.get_top5_users()

                response = f"*üèÜ –¢–æ–ø-20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –ø–æ –±–∞–ª–∞–Ω—Å—É:*\n"
                for idx, (user_id, balance) in enumerate(top_users, start=1):
                    response += f"\n*{idx} –º–µ—Å—Ç–æ*: *—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* {balance} $USDC"

                response += f"\n\nüìá *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ:* {number_with_offset}."

                await message.answer(response, parse_mode="markdown")

            else:
                await bot.send_chat_action(message.chat.id, "typing")
                await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                                       reply_markup=inl.showchannels())

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞::</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


URL_P = "https://telegra.ph/file/0749d3088c2c4e1479f45.png"

message_text_ad = (
    """ 

üî• <b>–í–Ω–∏–º–∞–Ω–∏–µ, –∫—Ä–∏–ø—Ç–æ—ç–Ω—Ç—É–∑–∏–∞—Å—Ç—ã!</b> üî•

–•–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –∞–∏—Ä–¥—Ä–æ–ø–æ–≤ –∏ —Ä–µ—Ç—Ä–æ–¥—Ä–æ–ø–æ–≤ —Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π —Ä–∞–∑–¥–∞—á–µ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç? üí∏ –¢–æ–≥–¥–∞ <a href='https://t.me/+t6zummR7uvRlYzQ6'>–Ω–∞—à –∫–∞–Ω–∞–ª</a> - –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!

<b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ <a href='https://t.me/+t6zummR7uvRlYzQ6'>VILLI_AL</a> –≤ Telegram, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:</b>
üöÄ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
üéÅ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞–∑–¥–∞—á–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
üìà –°–æ–≤–µ—Ç—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –≤ —Å—Ñ–µ—Ä–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –ø—Ä–∏–±—ã–ª—å! –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ <a href='https://t.me/+t6zummR7uvRlYzQ6'>VILLI_AL</a> –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ –∫—Ä–∏–ø—Ç–æ—Å–æ–æ–±—â–µ—Å—Ç–≤–∞! üíé

    """
)


@router.message(lambda message: message.text == "üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å")
async def knowledge_base_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        try:

            await bot.send_chat_action(message.chat.id, "typing")

            await bot.send_message(message.from_user.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –º–µ–Ω—é ¬´üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å¬ª:",
                                   reply_markup=rpl.refMenu, parse_mode="html")

            await bot.send_photo(message.from_user.id, photo=URL_P, caption=message_text_ad, parse_mode="html")
            await bot.send_message(6769252698, text="+1 –ø–æ–∫–∞–∑.", parse_mode="html")


        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id,
                                   "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.message(lambda message: message.text == "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å? ‚ùì")
async def referral_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        try:
            if await check_sub_channels(cfg.channels, message.from_user.id, bot):
                await bot.send_chat_action(message.chat.id, "typing")

                how = InlineKeyboardBuilder()
                how.button(text="–ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã?", callback_data="how_claim_ref_reward")
                how.adjust(1)

                await message.answer(lmsg.ref_q_message(), disable_web_page_preview=True, reply_markup=how.as_markup(), parse_mode="html")

            else:
                await bot.send_chat_action(message.chat.id, "typing")
                await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                                       reply_markup=inl.showchannels())

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.callback_query(lambda query: query.data == 'how_claim_ref_reward')
async def how_claim_ref_reward(callback_query: types.CallbackQuery, bot: Bot):

    try:

        bonus = InlineKeyboardBuilder()
        bonus.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ üîô", callback_data="how_working_ref_bonus")
        bonus.adjust(1)

        await callback_query.answer(text='', show_alert=True)
        await callback_query.message.edit_text(lmsg.ref_q_inline_message(), reply_markup=bonus.as_markup(), parse_mode="html")
    except Exception as e:
        await callback_query.bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {e}.", parse_mode="html")
        await callback_query.message.answer("‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="html")


@router.callback_query(lambda query: query.data == 'how_working_ref_bonus')
async def how_working_ref_bonus(callback_query: types.CallbackQuery, bot: Bot):

    try:

        how = InlineKeyboardBuilder()
        how.button(text="–ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã?", callback_data="how_claim_ref_reward")
        how.adjust(1)

        await callback_query.answer(text='', show_alert=True)
        await callback_query.message.edit_text(lmsg.ref_q_message(), disable_web_page_preview=True, reply_markup=how.as_markup(), parse_mode="html")

    except Exception as e:
        await callback_query.bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> {e}.", parse_mode="html")
        await callback_query.message.answer("‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="html")


@router.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è üîó")
async def referral_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        try:
            if await check_sub_channels(cfg.channels, message.from_user.id, bot):

                await bot.send_chat_action(message.chat.id, "typing")

                user_id = message.from_user.id

                builder = InlineKeyboardBuilder()
                builder.button(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π!",
                               url=f"tg://msg_url?url=https://t.me/{cfg.bot_username}?start={user_id}")
                builder.adjust(1)

                base_amount_per_referral = 0.20
                referral_count = db.count_reeferals(message.from_user.id)
                total_earned = base_amount_per_referral * referral_count

                reward_count_for_user = db.count_referral_rewards_for_user(message.from_user.id)
                total_earned_for_user = base_amount_per_referral * reward_count_for_user

                await message.answer(
                    text=lmsg.ref_link_message(reward_count_for_user, total_earned_for_user, user_id, db, cfg),
                    reply_markup=builder.as_markup(), parse_mode="html")


            else:
                await bot.send_chat_action(message.chat.id, "typing")
                await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                                       reply_markup=inl.showchannels())

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>Failed:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.message(lambda message: message.text == "‚õè –ú–∞–π–Ω–∏–Ω–≥")
async def knowledge_base_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":

        try:

            await bot.send_chat_action(message.chat.id, "typing")

            await bot.send_message(message.from_user.id, "–í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ –º–µ–Ω—é ¬´‚õè –ú–∞–π–Ω–∏–Ω–≥¬ª:", reply_markup=rpl.claimMenu,
                                   parse_mode="html")

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>Failed:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.message(lambda message: message.text == "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞–π–Ω–∏–Ω–≥? ‚ùì")
async def referral_hundler(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        try:
            if await check_sub_channels(cfg.channels, message.from_user.id, bot):
                await bot.send_chat_action(message.chat.id, "typing")

                await message.answer(lmsg.how_claim_message(), parse_mode="html")

            else:
                await bot.send_chat_action(message.chat.id, "typing")
                await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                                       reply_markup=inl.showchannels())

        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>Failed:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


# –ß–µ–º –≤—ã—à–µ –≤–µ—Å, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —ç—Ç–æ—Ç —Å–º–∞–π–ª–∏–∫ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ —Ä—É–ª–µ—Ç–∫–∏.

list_emoji = [
    {"emoji": "üíé", "weight": 10, "cost": 0.08},
    {"emoji": "ü™ô", "weight": 2, "cost": 0.10},
    {"emoji": "üåã", "weight": 1, "cost": 0.11},
    {"emoji": "‚õèÔ∏è", "weight": 1, "cost": 0.15}
]


async def spin_wheel():
    total_weight = sum(emoji["weight"] for emoji in list_emoji)
    random_num = random.uniform(0, total_weight)
    cumulative_weight = 0
    chosen_emoji = None

    for emoji in list_emoji:
        cumulative_weight += emoji["weight"]
        if random_num <= cumulative_weight:
            chosen_emoji = emoji
            break

    return chosen_emoji


@router.message(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª—é—Ç—É üí∞")
async def bot_message(message: types.Message, bot: Bot):
    if message.chat.type == "private":
        try:
            if await check_sub_channels(cfg.channels, message.from_user.id, bot):
                await bot.send_chat_action(message.chat.id, "typing")
                user_id = message.from_user.id
                current_time = int(time.time())

                if user_id not in last_button_press or current_time - last_button_press[user_id] >= 3600:
                    # –í—Ä–∞—â–∞–µ–º —Ä—É–ª–µ—Ç–∫—É
                    emoji_result = await spin_wheel()
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –Ω–∞ –±–∞–ª–∞–Ω—Å
                    db.add_to_balance(user_id, emoji_result["cost"])
                    last_button_press[user_id] = current_time

                    await bot.send_message(cfg.log_channel, f"{user_id} –ø–æ–ª—É—á–∞–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ +{emoji_result['cost']} ({emoji_result['emoji']}) –Ω–∞ –±–∞–ª–∞–Ω—Å.",
                                           message_thread_id=cfg.thread_id_get_usdc, parse_mode="html")

                    await message.answer(f"{emoji_result['emoji']} <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –ö –≤–∞—à–µ–º—É –±–∞–ª–∞–Ω—Å—É –¥–æ–±–∞–≤–ª–µ–Ω–æ +{emoji_result['cost']} $USDC!",
                                         parse_mode="html")
                else:
                    time_left = 3600 - (current_time - last_button_press[user_id])
                    await message.answer(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {time_left // 60} –º–∏–Ω—É—Ç!")
            else:
                await bot.send_chat_action(message.chat.id, "typing")
                await bot.send_message(message.from_user.id, text=lmsg.not_sub_message, parse_mode="html",
                                       reply_markup=inl.showchannels())
        except Exception as e:
            await bot.send_message(cfg.log_channel, f"‚ö†Ô∏è <b>Failed:</b> {e}.", message_thread_id=cfg.thread_id_sponsor,
                                   parse_mode="html")
            await bot.send_message(message.from_user.id, "‚ö†Ô∏è <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
                                   parse_mode="html")


@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def start(message: types.Message, bot: Bot):
    if message.chat.type == 'private':

        user_id = message.from_user.id
        username = message.from_user.username
        first_name = message.from_user.first_name
        last_name = message.from_user.last_name
        language_code = message.from_user.language_code

        if not db.user_exists(message.from_user.id):

            info_text = f"<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ò—Å–ø–æ–ª—å–∑—É—è ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª.</b>\n\n"
            info_text += f"User ID: {user_id}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={user_id}'>{first_name}</a>.\n"
            info_text += f"Username: @{username}\n" if username else "No username\n"
            info_text += f"First Name: {first_name}\n"
            info_text += f"Last Name: {last_name}\n" if last_name else "No last name\n"
            info_text += f"Language Code: {language_code}\n" if language_code else "No language code\n"

            await bot.send_message(cfg.log_channel, info_text, message_thread_id=cfg.thread_id_start, parse_mode="html")
            await bot.send_photo(message.from_user.id, photo=cfg.photo_start_url, caption=lmsg.start_message(first_name, user_id), parse_mode="html", reply_markup=rpl.mainMenu)

            try:
                db.add_user(message.from_user.id, 0)
            except Exception as e:
                await bot.send_message(cfg.log_channel, f"Failed to add user to db: {e}.",
                                       message_thread_id=cfg.thread_id_db, parse_mode="html")
        else:
            await bot.send_photo(message.from_user.id, photo=cfg.photo_start_url, caption=lmsg.start_message(first_name, user_id), parse_mode="html", reply_markup=rpl.mainMenu)
